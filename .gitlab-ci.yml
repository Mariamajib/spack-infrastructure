variables:
  SPACK_REPO: https://github.com/spack/spack.git
stages:
  - generate
  - build
  - approve
  - deploy

gerty-e4s-21.11-ci:
  stage: generate
  tags: [gerty-e4s]
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "GERTY_E4S_21.11")
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - spack-configs/cori-e4s-21.11/ci/gerty/spack.yaml
      allow_failure: true
  script:
    - source setup-env.sh      
    - git clone -b e4s-21.11 $SPACK_REPO 
    - . spack/share/spack/setup-env.sh
    - spack-python --path
    - spack env activate -d $CI_PROJECT_DIR/spack-configs/cori-e4s-21.11/ci/gerty
    - spack concretize -f | tee $CI_PROJECT_DIR/concretize.log
    - spack install 
    - spack find
      #- spack module tcl refresh --delete-tree -y
      #- spack module lmod refresh --delete-tree -y
      #    - module use $SPACK_ROOT/opt/modules/tcl/cray-sles15-zen2
      #    - ml av
      #    - module unuse $SPACK_ROOT/opt/modules/tcl/cray-sles15-zen2
      #    - module use $SPACK_ROOT/opt/modules/lmod/cray-sles15-x86_64/Core
      #    - ml av
      #    - module unuse $SPACK_ROOT/opt/modules/lmod/cray-sles15-x86_64/Core 
  artifacts:  
    paths: [$CI_PROJECT_DIR/concretize.log]

perlmutter-spack-develop:
  stage: build
  tags: [perlmutter-e4s]
  interruptible: true
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "PERLMUTTER_SPACK_DEVELOP")
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - spack-configs/perlmutter-spack-develop/spack.yaml
      allow_failure: true
  script:
    - python3 -m venv $CI_PROJECT_DIR/spack-pyenv
    - source $CI_PROJECT_DIR/spack-pyenv/bin/activate
    - pip install clingo  
    - which python && pip list 
    - rm -rf ~/.spack/
    - export SPACK_DISABLE_LOCAL_CONFIG=true
    - spack_root=$CFS/m3503/spackstacks/perlmutter/spack-develop/
    - rm -rf $spack_root
    - mkdir -p $spack_root
    - git clone $SPACK_REPO $spack_root/spack
    - . $spack_root/spack/share/spack/setup-env.sh
    - cd $CI_PROJECT_DIR
    - spack env activate -d spack-configs/perlmutter-spack-develop    
    - spack concretize -f | tee ${CI_PROJECT_DIR}/concretize.log
    - spack install
    - spack find

  after_script:
  - rm -rf $SPACK_ROOT
  artifacts:
    paths:
    - "${CI_PROJECT_DIR}/jobs_scratch_dir"
    - "${CI_PROJECT_DIR}/concretize.log"



perlmutter-systemlayer-ci:
  stage: build
  tags: [perlmutter-e4s]
  interruptible: true
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "PERLMUTTER_SYSTEM_LAYER")
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - spack-configs/perlmutter-systemlayer/ci/spack.yaml
      allow_failure: true
  script:
    - source spack-configs/perlmutter-systemlayer/ci/setup.sh
    - spack concretize --reuse
    - spack install --reuse
    - spack find

perlmutter-e4s-21.11-ci:
  stage: build
  tags: [perlmutter-e4s]
  interruptible: true
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "PERLMUTTER_E4S_21.11")
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - spack-configs/perlmutter-e4s-21.11/ci/spack.yaml
      allow_failure: true
  script:
    - source setup-env.sh      
    - git clone -b e4s-21.11 $SPACK_REPO 
    - . spack/share/spack/setup-env.sh
    - spack-python --path
    - spack env activate -d $CI_PROJECT_DIR/spack-configs/perlmutter-e4s-21.11/ci/
    - spack concretize -f | tee $CI_PROJECT_DIR/concretize.log
    - spack install 
    - spack find
    - spack module tcl refresh --delete-tree -y
    - spack module lmod refresh --delete-tree -y
    - module use $SPACK_ROOT/opt/modules/tcl/cray-sles15-zen2
    - ml av
    - module unuse $SPACK_ROOT/opt/modules/tcl/cray-sles15-zen2
    - module use $SPACK_ROOT/opt/modules/lmod/cray-sles15-x86_64/Core
    - ml av
    - module unuse $SPACK_ROOT/opt/modules/lmod/cray-sles15-x86_64/Core 
  
  artifacts:
    paths: [$CI_PROJECT_DIR/concretize.log]

muller-e4s-21.11-ci:
  stage: build
  tags: [muller-e4s]
  interruptible: true
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "MULLER_E4S_21.11")
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - spack-configs/perlmutter-e4s-21.11/ci/muller/spack.yaml
      allow_failure: true
  script:
  - source $CI_PROJECT_DIR/setup-env.sh
  - git clone -b e4s-21.11 $SPACK_REPO 
  - . spack/share/spack/setup-env.sh
  - spack-python --path
  - cd $CI_PROJECT_DIR
  - spack env activate -d $CI_PROJECT_DIR/spack-configs/perlmutter-e4s-21.11/ci/muller/
  - spack concretize -f | tee $CI_PROJECT_DIR/concretize.log
  - spack install
  - spack find  
  
  artifacts:
    paths: [$CI_PROJECT_DIR/concretize.log]

## PRODUCTION PIPELINES BELOW

approve:
  stage: approve
  tags: [perlmutter-e4s]
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && ($PIPELINE_NAME == "PERLMUTTER_SYSTEM_LAYER_DEPLOY"  || $PIPELINE_NAME == "PERLMUTTER_E4S_21.11_DEPLOY")
      when: manual
      allow_failure: false
  environment:
    name: production
  script:
    - echo Approval Granted, we will commence execution of production pipeline


perlmutter-systemlayer-prod:
  stage: deploy
  tags: [perlmutter-e4s]
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $PIPELINE_NAME == "PERLMUTTER_SYSTEM_LAYER_DEPLOY"
  script:
    - bash spack-configs/perlmutter-systemlayer/deploy.sh


perlmutter-e4s-21.11-prod:
  stage: deploy
  tags: [perlmutter-e4s]
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $PIPELINE_NAME == "PERLMUTTER_E4S_21.11_DEPLOY"
  script:
  - bash spack-configs/perlmutter-e4s-21.11/deploy.sh


#perlmutter-spack-develop-generate:
#  stage: generate
#  tags: [perlmutter-e4s]
#  interruptible: true
#  rules:
#    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "PERLMUTTER_SPACK_CI_DEVELOP")
#      allow_failure: true
#    - if: $CI_PIPELINE_SOURCE == "push"
#      changes:
#      - spack-configs/perlmutter-spack-develop/spack.yaml
#      allow_failure: true
#  script:
#    - python3 -m venv $CI_PROJECT_DIR/spack-pyenv
#    - source $CI_PROJECT_DIR/spack-pyenv/bin/activate
#    - pip install clingo  
#    - which python && pip list 
#    - rm -rf ~/.spack/
#    - export SPACK_DISABLE_LOCAL_CONFIG=true
#    - git clone $SPACK_REPO
#    - . spack/share/spack/setup-env.sh
#    - cd $CI_PROJECT_DIR
#    - spack env activate -d spack-configs/perlmutter-spack-develop    
#    - spack concretize -f | tee ${CI_PROJECT_DIR}/concretize.log
#    - spack -d ci generate --optimize --artifacts-root  "${CI_PROJECT_DIR}/jobs_scratch_dir" --output-file ${CI_PROJECT_DIR}/jobs_scratch_dir/pipeline.yml 

#  after_script:
#  - rm -rf $SPACK_ROOT
#  artifacts:
#    paths:
#    - "${CI_PROJECT_DIR}/jobs_scratch_dir"
#    - "${CI_PROJECT_DIR}/concretize.log"

#perlmutter-spack-develop-build:  
#  stage: build
#  rules:
#    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "PERLMUTTER_SPACK_CI_DEVELOP")
#      allow_failure: true
#    - if: $CI_PIPELINE_SOURCE == "push"
#      changes:
#      - spack-configs/perlmutter-spack-develop/spack.yaml
#      allow_failure: true
#  trigger:
#    include:
#    - artifact: "jobs_scratch_dir/pipeline.yml"
#      job: perlmutter-spack-develop-generate
#    strategy: depend
