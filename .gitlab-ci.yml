variables:
  SPACK_REPO: https://github.com/spack/spack.git
stages:
  - generate
  - build

perlmutter-spack-develop-generate:
  stage: generate
  tags: [perlmutter-login21]
  rules:
    - if: '($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && $PIPELINE_NAME == "PERLMUTTER_SPACK_DEVELOP"' 
      changes:
      - spack-configs/perlmutter-spack-develop/spack.yaml
      when: always
      allow_failure: true
  script:
    - python3 -m venv $CI_PROJECT_DIR/spack-pyenv
    - source $CI_PROJECT_DIR/spack-pyenv/bin/activate
    - pip install clingo  
    - which python && pip list 
    - rm -rf ~/.spack/
    - export SPACK_DISABLE_LOCAL_CONFIG=true
    - git clone $SPACK_REPO
    - . spack/share/spack/setup-env.sh
    - cd $CI_PROJECT_DIR
    - spack env activate -d spack-configs/perlmutter-spack-develop    
    - spack concretize -f | tee ${CI_PROJECT_DIR}/concretize.log
    - spack ci generate --artifacts-root  "${CI_PROJECT_DIR}/jobs_scratch_dir" --output-file ${CI_PROJECT_DIR}/jobs_scratch_dir/pipeline.yml 
    #- spack concretize --reuse
    #- spack install --reuse
  after_script:
  - rm -rf $SPACK_ROOT
  artifacts:
    paths:
    - "${CI_PROJECT_DIR}/jobs_scratch_dir"
    - "${CI_PROJECT_DIR}/concretize.log"

perlmutter-spack-develop-build:  
  stage: build
  rules:
  - if: '($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && $PIPELINE_NAME == "PERLMUTTER_SPACK_DEVELOP"' 
    changes:
      - spack-configs/perlmutter-spack-develop/spack.yaml
    when: always
    allow_failure: true
  trigger:
    include:
    - artifact: "jobs_scratch_dir/pipeline.yml"
      job: perlmutter-spack-develop-generate
    strategy: depend

perlmutter-systemlayer-ci:
  stage: build
  tags: [perlmutter-login21]
  interruptible: true
  rules:
    - if: '($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && $PIPELINE_NAME == "PERLMUTTER_SYSTEM_LAYER"' 
      changes:
      - spack-configs/perlmutter-systemlayer/ci/spack.yaml
      when: always
      allow_failure: true
    - when: never
  script:
    - python3 -m venv $CI_PROJECT_DIR/spack-pyenv
    - source $CI_PROJECT_DIR/spack-pyenv/bin/activate    
    - pip install clingo 
    - which python && pip list  
    - rm -rf ~/.spack/
    - export SPACK_DISABLE_LOCAL_CONFIG=true
    - git clone -b e4s-21.11 $SPACK_REPO
    - . spack/share/spack/setup-env.sh
    - cd spack
    # need to set line below to cherry-pick commit
    - git config user.name 'e4s' 
    - git config user.email 'e4s@nersc.gov'
    # NVHPC 21.11 - https://github.com/spack/spack/pull/27910
    - git cherry-pick 5d6a9a7
    - cd $CI_PROJECT_DIR
    - spack env activate -d spack-configs/perlmutter-systemlayer/ci
    - spack concretize --reuse
    - spack install --reuse
    - spack find

perlmutter-e4s-21.11-ci:
  stage: build
  tags: [perlmutter-login21]
  interruptible: true
  rules:
    - if: '($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && $PIPELINE_NAME == "PERLMUTTER_E4S-21.11"' 
      changes:
      - spack-configs/perlmutter-e4s-21.11/ci/spack.yaml
      when: always
      allow_failure: true
  script:
    - python3 -m venv $CI_PROJECT_DIR/spack-pyenv
    - source $CI_PROJECT_DIR/spack-pyenv/bin/activate    
    - pip install clingo  
    - which python && pip list      
    - rm -rf ~/.spack/
    - export SPACK_DISABLE_LOCAL_CONFIG=true
    - git clone -b e4s-21.11 $SPACK_REPO 
    - . spack/share/spack/setup-env.sh
    - cd $CI_PROJECT_DIR
    - spack env activate -d spack-configs/perlmutter-e4s-21.11/ci
    - spack concretize -f | tee $CI_PROJECT_DIR/concretize.log
    - spack install 
    - spack find
  
  artifacts:
    paths: [$CI_PROJECT_DIR/concretize.log]

