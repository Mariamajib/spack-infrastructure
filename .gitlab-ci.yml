variables:
  SPACK_REPO: https://github.com/spack/spack.git
stages:
  - generate
  - build
  - approve
  - deploy

perlmutter-spack-develop-generate:
  stage: generate
  tags: [perlmutter-login21]
  interruptible: true
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "PERLMUTTER_SPACK_DEVELOP")
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - spack-configs/perlmutter-spack-develop/spack.yaml
      allow_failure: true
  script:
    - python3 -m venv $CI_PROJECT_DIR/spack-pyenv
    - source $CI_PROJECT_DIR/spack-pyenv/bin/activate
    - pip install clingo  
    - which python && pip list 
    - rm -rf ~/.spack/
    - export SPACK_DISABLE_LOCAL_CONFIG=true
    - git clone $SPACK_REPO
    - . spack/share/spack/setup-env.sh
    - cd $CI_PROJECT_DIR
    - spack env activate -d spack-configs/perlmutter-spack-develop    
    - spack concretize -f | tee ${CI_PROJECT_DIR}/concretize.log
    - spack ci generate --optimize --artifacts-root  "${CI_PROJECT_DIR}/jobs_scratch_dir" --output-file ${CI_PROJECT_DIR}/jobs_scratch_dir/pipeline.yml 
    #- spack concretize --reuse
    #- spack install --reuse
  after_script:
  - rm -rf $SPACK_ROOT
  artifacts:
    paths:
    - "${CI_PROJECT_DIR}/jobs_scratch_dir"
    - "${CI_PROJECT_DIR}/concretize.log"

perlmutter-spack-develop-build:  
  stage: build
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "PERLMUTTER_SPACK_DEVELOP")
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - spack-configs/perlmutter-spack-develop/spack.yaml
      allow_failure: true
  trigger:
    include:
    - artifact: "jobs_scratch_dir/pipeline.yml"
      job: perlmutter-spack-develop-generate
    strategy: depend

perlmutter-systemlayer-ci:
  stage: build
  tags: [perlmutter-login21]
  interruptible: true
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "PERLMUTTER_SYSTEM_LAYER")
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - spack-configs/perlmutter-systemlayer/ci/spack.yaml
      allow_failure: true
  script:
    - source spack-configs/perlmutter-systemlayer/ci/setup.sh
    - spack concretize --reuse
    - spack install --reuse
    - spack find

perlmutter-e4s-21.11-ci:
  stage: build
  tags: [perlmutter-login21]
  interruptible: true
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && ($PIPELINE_NAME == "PERLMUTTER_E4S_21.11")
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - spack-configs/perlmutter-e4s-21.11/ci/spack.yaml
      allow_failure: true
  script:
    - source $CI_PROJECT_DIR/spack-configs/perlmutter-e4s-21.11/ci/setup.sh
    - spack concretize -f | tee $CI_PROJECT_DIR/concretize.log
    - spack install 
    - spack find
  
  artifacts:
    paths: [$CI_PROJECT_DIR/concretize.log]

## PRODUCTION PIPELINES BELOW

approve:
  stage: approve
  script:
    - echo Hello!
  environment:
    name: production
  when: manual
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $PIPELINE_NAME == "PERLMUTTER_SYSTEM_LAYER_DEPLOY"    


perlmutter-systemlayer-prod:
  stage: deploy
  tags: [perlmutter-login21]
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $PIPELINE_NAME == "PERLMUTTER_SYSTEM_LAYER_DEPLOY"
  script:
    - bash spack-configs/perlmutter-systemlayer/deploy.sh

